package com.flight.trs.model.entity;
// Generated 2016-1-16 17:01:14 by Hibernate Tools 4.3.1.Final

import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.flight.trs.model.IDeleteNotPhysically;

/**
 * Customer generated by hbm2java
 */
@Entity
@Table(name = "TRS_CUSTOMER"
	, uniqueConstraints = @UniqueConstraint(columnNames = "PHONE") 
)
@JsonAutoDetect(fieldVisibility=JsonAutoDetect.Visibility.ANY)
@JsonIgnoreProperties({"serialVersionUID","password","isDeleted","orders"})
public class Customer implements java.io.Serializable 
	, IDeleteNotPhysically{

	private static final long serialVersionUID = 824227809912100231L;
	private long id;				//账号ID
	private String phone;			//登录手机号码
	private String password;		//登录密码
	private String email;			//电子邮箱
	private String staticSalt;		//静态随机盐
	private String dynamicSalt;     //动态随机盐
	private double balance = 0;		//账号余额
	private char isLocked = 'u';	//该账号是否已被锁定
	private char isDeleted = 'n';	//该账号是否已被删除
	private List<Order> orders = new ArrayList<Order>(0);	//该用户所有订单

	public Customer() {
	}

	public Customer(String phone, String email, String password, String staticSalt, String dynamicSalt) {
		this.phone = phone;
		this.email = email;
		this.password = password;
		this.staticSalt = staticSalt;
		this.dynamicSalt = dynamicSalt;
	}

	public Customer(String phone, String password, String email, String staticSalt, String dynamicSalt, List<Order> orders) {
		this.phone = phone;
		this.password = password;
		this.staticSalt = staticSalt;
		this.dynamicSalt = dynamicSalt;
		this.email = email;
		this.orders = orders;
	}

	@Id
	@SequenceGenerator(name = "seqGeneratorCUSTOMER"
		, sequenceName = "SEQ_CUSTOMER"
		, allocationSize=1
		)
	@GeneratedValue(generator = "seqGeneratorCUSTOMER")
	@Column(name = "ID", insertable = false, updatable = false, unique = true,
		nullable = false, precision = 11, scale = 0)
	public long getId() {
		return this.id;
	}
	
	public void setId(long id) {
		this.id = id;
	}

	@Column(name = "PHONE", unique = true, nullable = false, length = 11)
	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Column(name = "PASSWORD", nullable = false, length = 32)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "EMAIL")
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}
	
	@Column(name = "STATIC_SALT")
	public String getStaticSalt() {
		return staticSalt;
	}
	
	public void setStaticSalt(String staticSalt) {
		this.staticSalt = staticSalt;
	}
	
	@Column(name = "DYNAMIC_SALT")
	public String getDynamicSalt() {
		return dynamicSalt;
	}
	
	public void setDynamicSalt(String dynamicSalt) {
		this.dynamicSalt = dynamicSalt;
	}

	@Column(name = "BALANCE", nullable = false, precision = 12)
	public double getBalance() {
		return this.balance;
	}

	public void setBalance(double balance) {
		this.balance = balance;
	}

	@Column(name = "IS_LOCKED", nullable = false, length = 1)
	public char getIsLocked() {
		return this.isLocked;
	}

	public void setIsLocked(char isLocked) {
		this.isLocked = isLocked;
	}

	@Column(name = "IS_DELETED", nullable = false, length = 1)
	@JsonIgnore
	public char getIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(char isDeleted) {
		this.isDeleted = isDeleted;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customer")
	@OrderBy("orderDate desc")
	@JsonIgnore
	public List<Order> getOrders() {
		return this.orders;
	}

	public void setOrders(List<Order> orders) {
		this.orders = orders;
	}

	@Transient
	public boolean isDeleted(){
		return getIsDeleted() == 'y';
	}
	
	@Transient
	public boolean isLocked(){
		return getIsLocked() == 'y';
	}
	
	@Transient
	@Override
	public void deleteNotPhysically() {
		// TODO
		setIsDeleted('y');
	}

}

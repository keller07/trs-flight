package com.flight.trs.model.entity;
// Generated 2016-1-16 17:01:14 by Hibernate Tools 4.3.1.Final

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.flight.trs.model.IDeleteNotPhysically;

/**
 * PassengerGauge generated by hbm2java
 */
@Entity
@Table(name = "TRS_PASSENGER_GAUGE")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
@JsonAutoDetect(fieldVisibility=JsonAutoDetect.Visibility.ANY)
@JsonIgnoreProperties({"serialVersionUID","carrier","invalidating"
	,"upgrade","exchanging","isDeleted"})
public class PassengerGauge 
	implements java.io.Serializable , IDeleteNotPhysically{

	/** 
	 * @Fields serialVersionUID : TODO
	 */ 
	private static final long serialVersionUID = 1661077839520088339L;
	@JsonUnwrapped
	private PassengerGaugeId id;
	private Carrier carrier;
	private String classOfService;
	private float discount;
	private String refund;
	private String rescheduling;
	private String endorsement;
	private String invalidating;
	private String upgrade;
	private String exchanging;
	private char isDeleted = 'n';

	public PassengerGauge() {
	}

	public PassengerGauge(PassengerGaugeId id, String classOfService, float discount,
			String refund, String rescheduling, String endorsement, String invalidating, String upgrade,
			String exchanging) {
		this.id = id;
		this.classOfService = classOfService;
		this.discount = discount;
		this.refund = refund;
		this.rescheduling = rescheduling;
		this.endorsement = endorsement;
		this.invalidating = invalidating;
		this.upgrade = upgrade;
		this.exchanging = exchanging;
	}

	@EmbeddedId

	@AttributeOverrides({
			@AttributeOverride(name = "carrierCode", column = @Column(name = "CARRIER_CODE", nullable = false, length = 2) ),
			@AttributeOverride(name = "clCode", column = @Column(name = "CL_CODE", nullable = false, length = 1) ) })
	@JsonUnwrapped
	public PassengerGaugeId getId() {
		return this.id;
	}

	public void setId(PassengerGaugeId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CARRIER_CODE", nullable = false, insertable = false, updatable = false)
	@JsonIgnore
	public Carrier getCarrier() {
		return this.carrier;
	}

	public void setCarrier(Carrier carrier) {
		this.carrier = carrier;
	}

	@Column(name = "CLASS_OF_SERVICE", nullable = false, length = 16)
	public String getClassOfService() {
		return this.classOfService;
	}

	public void setClassOfService(String classOfService) {
		this.classOfService = classOfService;
	}

	@Column(name = "DISCOUNT", nullable = false, precision = 2, scale = 1)
	public float getDiscount() {
		return this.discount;
	}

	public void setDiscount(float discount) {
		this.discount = discount;
	}

	@Column(name = "REFUND", nullable = false, length = 600)
	public String getRefund() {
		return this.refund;
	}

	public void setRefund(String refund) {
		this.refund = refund;
	}

	@Column(name = "RESCHEDULING", nullable = false, length = 600)
	public String getRescheduling() {
		return this.rescheduling;
	}

	public void setRescheduling(String rescheduling) {
		this.rescheduling = rescheduling;
	}

	@Column(name = "ENDORSEMENT", nullable = false, length = 600)
	public String getEndorsement() {
		return this.endorsement;
	}

	public void setEndorsement(String endorsement) {
		this.endorsement = endorsement;
	}

	@Column(name = "INVALIDATING", nullable = false, length = 600)
	public String getInvalidating() {
		return this.invalidating;
	}

	public void setInvalidating(String invalidating) {
		this.invalidating = invalidating;
	}

	@Column(name = "UPGRADE", nullable = false, length = 600)
	public String getUpgrade() {
		return this.upgrade;
	}

	public void setUpgrade(String upgrade) {
		this.upgrade = upgrade;
	}

	@Column(name = "EXCHANGING", nullable = false, length = 600)
	public String getExchanging() {
		return this.exchanging;
	}

	public void setExchanging(String exchanging) {
		this.exchanging = exchanging;
	}
	
	@Column(name = "IS_DELETED", nullable = false, length = 1)
	@JsonIgnore
	public char getIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(char isDeleted) {
		this.isDeleted = isDeleted;
	}
	
	@Transient
	@Override
	public void deleteNotPhysically() {
		// TODO
		setIsDeleted('y');
	}
	
}

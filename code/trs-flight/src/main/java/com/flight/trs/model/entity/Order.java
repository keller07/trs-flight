package com.flight.trs.model.entity;
// Generated 2016-1-16 17:01:14 by Hibernate Tools 4.3.1.Final

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.flight.trs.model.IDeleteNotPhysically;

/**
 * Order generated by hbm2java
 */
@Entity
@Table(name = "TRS_ORDER_FORM")
@JsonAutoDetect(fieldVisibility=JsonAutoDetect.Visibility.ANY)
@JsonIgnoreProperties({"serialVersionUID","payments","handler","lastModified","isDeleted"})
public class Order implements Serializable 
	, IDeleteNotPhysically{

	/** 
	 * @Fields serialVersionUID : TODO
	 */ 
	private static final long serialVersionUID = -1531541914414241903L;
	private BigDecimal no;
	@JsonIgnoreProperties({"name","email","balance","isLocked"})
	private Customer customer;
	private Date orderDate;
	private String contactName;
	private String contactPhone;
	private int totalCost;
	private String remark = "";
	private String pnr;
	private String status = "unpaid";
	@JsonIgnoreProperties({"role","isLocked"})
	private Employee handler;
	private Date lastModified;
	private char isLocked = 'u';
	private char isDeleted = 'n';
	private List<Payment> payments = new ArrayList<Payment>();
	private List<Ticket> tickets = new ArrayList<Ticket>();
	private List<OrderVoyage> orderVoyages = new ArrayList<OrderVoyage>();
	
	public Order() {
	}

	public Order(BigDecimal no, Date orderDate, String contactName, String contactPhone, int totalCost,
			String remark) {
		this.no = no;
		this.orderDate = orderDate;
		this.contactName = contactName;
		this.contactPhone = contactPhone;
		this.totalCost = totalCost;
		this.remark = remark;
	}

	public Order(BigDecimal no, Customer customer, Date orderDate, String contactName, String contactPhone,
			int totalCost, String remark) {
		this.no = no;
		this.customer = customer;
		this.orderDate = orderDate;
		this.contactName = contactName;
		this.contactPhone = contactPhone;
		this.totalCost = totalCost;
		this.remark = remark;
	}

	@Id
	@Column(name = "NO", unique = true, nullable = false, precision = 20, scale = 0)
	public BigDecimal getNo() {
		return this.no;
	}

	public void setNo(BigDecimal no) {
		this.no = no;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CSTM_ID")
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ORDER_DATE", nullable = false)
	public Date getOrderDate() {
		return this.orderDate;
	}

	public void setOrderDate(Date orderDate) {
		this.orderDate = orderDate;
	}

	@Column(name = "CONTACT_NAME", nullable = false, length = 32)
	public String getContactName() {
		return this.contactName;
	}

	public void setContactName(String contactName) {
		this.contactName = contactName;
	}

	@Column(name = "CONTACT_PHONE", nullable = false, length = 11)
	public String getContactPhone() {
		return this.contactPhone;
	}

	public void setContactPhone(String contactPhone) {
		this.contactPhone = contactPhone;
	}

	@Column(name = "TOTAL_COST", nullable = false, precision = 6, scale = 0)
	public int getTotalCost() {
		return this.totalCost;
	}

	public void setTotalCost(int totalCost) {
		this.totalCost = totalCost;
	}

	@Column(name = "REMARK", nullable = false, length = 600)
	public String getRemark() {
		return this.remark;
	}

	public void setRemark(String remark) {
		this.remark = remark;
	}

	@Column(name = "PNR", nullable = false, length = 6)
	public String getPnr() {
		return this.pnr;
	}

	public void setPnr(String pnr) {
		this.pnr = pnr;
	}
	
	@Column(name = "STATUS", nullable = false, length = 24)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "HANDLER_NO")
	public Employee getHandler() {
		return handler;
	}

	public void setHandler(Employee handler) {
		this.handler = handler;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LAST_MODIFIED", nullable = false)
	public Date getLastModified() {
		return this.lastModified;
	}

	public void setLastModified(Date lastModified) {
		this.lastModified = lastModified;
	}

	@Column(name = "IS_LOCKED", nullable = false, length = 1)
	public char getIsLocked() {
		return this.isLocked;
	}

	public void setIsLocked(char isLocked) {
		this.isLocked = isLocked;
	}

	@Column(name = "IS_DELETED", nullable = false, length = 1)
	public char getIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(char isDeleted) {
		this.isDeleted = isDeleted;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "order")
	@Cascade(value = {CascadeType.SAVE_UPDATE})
	@OrderBy("paymentTime asc")
	public List<Payment> getPayments() {
		return this.payments;
	}

	public void setPayments(List<Payment> payments) {
		this.payments = payments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "order")
	@Cascade(value = {CascadeType.SAVE_UPDATE})
	@OrderBy("id.voyageIndex asc")
	public List<OrderVoyage> getOrderVoyages() {
		return this.orderVoyages;
	}

	public void setOrderVoyages(List<OrderVoyage> orderVoyages) {
		this.orderVoyages = orderVoyages;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "order")
	@Cascade(value = {CascadeType.SAVE_UPDATE})
	@OrderBy("ticketNo asc")
	public List<Ticket> getTickets() {
		return this.tickets;
	}

	public void setTickets(List<Ticket> tickets) {
		this.tickets = tickets;
	}

	@Transient
	@Override
	public void deleteNotPhysically() {
		// TODO
		setIsDeleted('y');
	}
}
